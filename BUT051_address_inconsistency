REPORT z_restore_but051_data.
****************************************************************************
* This report is used to restore information in BUT051 from ADR6 and ADCP. *
* Required in case of an upgrade to old support packages, like             *
*$  Release 700          SAPKU70001 - SAPKU70013                           *
*$  Release 701          SAPKU70103 - SAPKU70110                           *
*$  Release 702          SAPKU70201 - SAPKU70206                           *
*                                                                          *
****************************************************************************
* Types and Declarations
****************************************************************************
  TYPES:
    BEGIN OF ltyp_p1_p2,
      relnr         TYPE but052-relnr,
      partner1      TYPE but052-partner1,
      partner2      TYPE but052-partner2,
      date_to       TYPE but052-date_to,
      p1_addrnumber TYPE but052-addrnumber,
      p2_persnumber TYPE but000-persnumber,
      smtp_addr     TYPE adr6-smtp_addr,
      tel_number    TYPE adcp-tel_number,
      tel_extens    TYPE adcp-tel_extens,
      fax_number    TYPE adcp-fax_number,
      fax_extens    TYPE adcp-fax_extens,
      function      TYPE adcp-function,
      department    TYPE adcp-department,
    END OF ltyp_p1_p2.


  DATA:
      lt_but051       TYPE TABLE OF but051,
      lt_but051_upd   TYPE TABLE OF but051,
      ls_but051       TYPE but051,
      lt_p1_p2        TYPE TABLE OF ltyp_p1_p2,
      ls_p1_p2        TYPE ltyp_p1_p2,
      lv_field_list   TYPE string,
      lv_join_tab     TYPE tabname,
      lv_joined_from  TYPE string,
      lv_cursor       TYPE cursor,
      fpath_file      TYPE string VALUE 'C:\Z_RESTORE_BUT051_DATA\'.

  FIELD-SYMBOLS: <fs_but051> TYPE but051.

  PARAMETERS: testrun TYPE c LENGTH 1 DEFAULT 'X'.



****************************************************************************
* Begin
****************************************************************************

* Cursor to get records from BUT051 with empty email, function, department, telephone or fax
  OPEN CURSOR WITH HOLD lv_cursor FOR
    SELECT *
      FROM        but051 AS b51
      INNER JOIN  but052 AS b52
        ON
          b52~relnr    = b51~relnr    AND
          b52~partner1 = b51~partner1 AND
          b52~partner2 = b51~partner2
      WHERE
          b51~reltyp   = 'BUR001' AND
        ( smtp_address = '' OR
          fnctn        = '' OR
          dprtmnt      = '' OR
          tel_number   = '' OR
          fax_number   = ''    ).

  CHECK sy-subrc = 0.

* Fetch first 500 records to work with
  FETCH NEXT CURSOR lv_cursor INTO CORRESPONDING FIELDS OF TABLE lt_but051 PACKAGE SIZE 500.

  CHECK lt_but051 IS NOT INITIAL.

  WHILE lv_cursor IS NOT INITIAL.

    DATA lv_counter TYPE i VALUE 0.
    DATA lv_changed TYPE boolean VALUE abap_false.

    lv_counter = lv_counter + 1.

    DO 2 TIMES.

      CASE lv_counter.
        WHEN 1.
*         E-mail address from ADR6
          lv_field_list  = 'b52~relnr b52~partner1 b52~partner2 b52~addrnumber b00~persnumber adr~smtp_addr'.
          lv_join_tab    = 'ADR6'.
        WHEN 2.
*         Telephone, Fax, Function, Department number from ADCP
          lv_field_list = 'b52~relnr b52~partner1 b52~partner2 b52~addrnumber b00~persnumber'
                        && ' adr~tel_number adr~tel_extens adr~fax_number adr~fax_extens adr~function adr~department'.
          lv_join_tab   = 'ADCP'.
      ENDCASE.

*     Dynamic FROM clause
      lv_joined_from = |( ( BUT052 AS b52 |
                    && | INNER JOIN BUT000 AS b00 ON b52~partner2 = b00~partner ) |
                    && | INNER JOIN |
                    && lv_join_tab
                    && | AS adr ON b52~addrnumber = adr~addrnumber AND b00~persnumber = adr~persnumber ) |.


*     Query for e-mail address from ADR6, and other fields from ADCP
      SELECT (lv_field_list)
        FROM (lv_joined_from)
        INTO CORRESPONDING FIELDS OF TABLE lt_p1_p2 FOR ALL ENTRIES IN lt_but051
        WHERE
          b52~relnr    = lt_but051-relnr    AND
          b52~partner1 = lt_but051-partner1 AND
          b52~partner2 = lt_but051-partner2.


      LOOP AT lt_p1_p2 INTO ls_p1_p2.

        CLEAR lv_changed.

        READ TABLE lt_but051[] ASSIGNING <fs_but051> WITH KEY relnr = ls_p1_p2-relnr
                                                              partner1 = ls_p1_p2-partner1
                                                              partner2 = ls_p1_p2-partner2.
        CHECK <fs_but051> IS ASSIGNED.

        CASE lv_counter.

          WHEN 1. "Email from ADR6
            IF <fs_but051>-smtp_address <> ls_p1_p2-smtp_addr.
              <fs_but051>-smtp_address = ls_p1_p2-smtp_addr.
               lv_changed = 'X'.
            ENDIF.

          WHEN 2. "Other fields from ADCP
            IF  <fs_but051>-tel_number <> ls_p1_p2-tel_number OR
                <fs_but051>-tel_extens <> ls_p1_p2-tel_extens OR
                <fs_but051>-fax_number <> ls_p1_p2-fax_number OR
                <fs_but051>-fax_extens <> ls_p1_p2-fax_extens OR
                <fs_but051>-fnctn      <> ls_p1_p2-function   OR
                <fs_but051>-dprtmnt    <> ls_p1_p2-department.

              <fs_but051>-tel_number = ls_p1_p2-tel_number.
              <fs_but051>-tel_extens = ls_p1_p2-tel_extens.
              <fs_but051>-fax_number = ls_p1_p2-fax_number.
              <fs_but051>-fax_extens = ls_p1_p2-fax_extens.
              <fs_but051>-fnctn      = ls_p1_p2-function.
              <fs_but051>-dprtmnt    = ls_p1_p2-department.

              lv_changed = 'X'.
            ENDIF.
        ENDCASE.

*       If one of the values was changed, collect into update table
        IF lv_changed = 'X'.
          APPEND <fs_but051> TO lt_but051_upd.
        ENDIF.
      ENDLOOP.

      lv_counter = lv_counter + 1. "for the next query to be executed

      CLEAR: ls_p1_p2, lt_p1_p2.

    ENDDO.

    CLEAR: lt_but051.

*   Get next 500 records from BUT051
    FETCH NEXT CURSOR lv_cursor INTO CORRESPONDING FIELDS OF TABLE lt_but051 PACKAGE SIZE 500.

    IF lt_but051 IS NOT INITIAL.
      CLEAR lv_counter. "start from ADR6 query again
    ELSE.
*     No more records in BUT051
      EXIT.
    ENDIF.

  ENDWHILE.

  CLOSE CURSOR lv_cursor.
  CLEAR lv_counter.
****************************************************************************
* Create data backup file
****************************************************************************
  IF lt_but051_upd IS NOT INITIAL.

    IF sy-batch IS INITIAL.
      SELECT * FROM but051 INTO CORRESPONDING FIELDS OF TABLE lt_but051 FOR ALL ENTRIES IN lt_but051_upd
        WHERE
          relnr    = lt_but051_upd-relnr    AND
          partner1 = lt_but051_upd-partner1 AND
          partner2 = lt_but051_upd-partner2.

      CONCATENATE fpath_file 'Z_RESTORE_BUT051_DATA.xls' INTO fpath_file.

      CALL FUNCTION 'GUI_DOWNLOAD'
        EXPORTING
          FILENAME              = fpath_file
          FILETYPE              = 'ASC'
          WRITE_FIELD_SEPARATOR = 'X'
        TABLES
          DATA_TAB              = lt_but051[].

      IF SY-SUBRC <> 0.
        WRITE: 'Cannot create backup file Z_RESTORE_BUT051_DATA.xls. Aborting report. '.
        RETURN.
      ELSE.
        WRITE:/ 'Backup file stored at:  '.
        WRITE: fpath_file.
      ENDIF.
    ELSE.
      DATA: file_loc(50) TYPE C VALUE 'but051_backup.txt'.
      DATA: file_string TYPE string,
            file_line TYPE string,
            file_field TYPE string,
            lt_dfies_tab TYPE TABLE OF dfies,
            ls_dfies_wa TYPE dfies,
            lt_fields   TYPE TABLE OF fieldname,
            lv_field TYPE fieldname,
            lv_end TYPE I,
            lc_crlf(2) TYPE c VALUE cl_abap_char_utilities=>cr_lf.

      FIELD-SYMBOLS: <fs_field> TYPE any.

      CALL FUNCTION 'DDIF_FIELDINFO_GET'
        EXPORTING
          tabname              = 'BUT051'
        TABLES
          DFIES_TAB            = lt_dfies_tab
        EXCEPTIONS
          NOT_FOUND            = 1
          INTERNAL_ERROR       = 2
          OTHERS               = 3.

      IF sy-subrc <> 0.
        WRITE: / 'Error determining fields of table BUT051'.
        RETURN.
      ENDIF.

      LOOP AT lt_dfies_tab INTO ls_dfies_wa.
        APPEND ls_dfies_wa-fieldname TO lt_fields.
      ENDLOOP.

      DESCRIBE TABLE lt_fields LINES lv_end.

      TRY.
        OPEN DATASET file_loc FOR OUTPUT IN TEXT MODE ENCODING DEFAULT.
        CATCH cx_sy_file_open.
          "do nothing
        CATCH cx_root.
          WRITE: 'Cannot create backup file but051_backup.txt. Aborting report.'.
          RETURN.
      ENDTRY.

      TRY.
        LOOP AT lt_but051_upd INTO ls_but051.
          lv_counter = 1.
          WHILE lv_counter <= lv_end.
             READ TABLE lt_fields INTO lv_field INDEX lv_counter.
             IF sy-subrc = 0.
               ASSIGN COMPONENT lv_field OF STRUCTURE ls_but051 TO <fs_field>.
               IF <fs_field> IS ASSIGNED.
                 MOVE <fs_field> TO file_field.
                 IF file_field IS INITIAL.
                   file_field = '/'.
                 ENDIF.
                 IF lv_counter = 1.
                   file_line = file_field.
                 ELSE.
                   CONCATENATE file_line '#' file_field INTO file_line.
                 ENDIF.
               ENDIF.
             ENDIF.
             lv_counter = lv_counter + 1.
          ENDWHILE.
          IF file_string IS INITIAL.
            file_string = file_line.
          ELSE.
            CONCATENATE file_string lc_crlf file_line INTO file_string.
          ENDIF.
        ENDLOOP.

        TRANSFER file_string TO file_loc.

        CATCH cx_root.
          WRITE: 'Cannot write to backup file but051_backup.txt. Aborting report.'.
          CLOSE DATASET file_loc.
          RETURN.
      ENDTRY.

      CLOSE DATASET file_loc.
    ENDIF.

****************************************************************************
* Update Database (if test run mode is not checked)
****************************************************************************
    IF testrun IS INITIAL.
      UPDATE but051 FROM TABLE lt_but051_upd.
      COMMIT WORK AND WAIT.
      WRITE:/ 'Changes committed to the database.'.
    ELSE.
      WRITE:/ 'Test run successful. Backup file: BUT051_BACKUP.TXT.'.
    ENDIF.

  ENDIF.
